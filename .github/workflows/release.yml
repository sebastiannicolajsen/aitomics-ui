name: Release

on:
  push:
    tags:
      - 'v*'

# Add explicit permissions
permissions:
  contents: write  # Required for creating releases and uploading artifacts
  packages: write  # Required for publishing packages
  discussions: write  # Required for creating release discussions

# Add job timeout
jobs:
  release:
    runs-on: ${{ matrix.os }}
    # Add timeout-minutes at the job level
    timeout-minutes: 60

    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        timeout-minutes: 5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        timeout-minutes: 5
        with:
          node-version: '20'
          # Remove the built-in npm cache as we're using our own
          cache: ''

      - name: Debug cache paths
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing package files:"
          ls -la package*.json
          echo "Listing renderer package files:"
          ls -la src/renderer/package*.json
          echo "Cache key for root: ${{ runner.os }}-root-modules-${{ hashFiles('package-lock.json') }}"
          echo "Cache key for renderer: ${{ runner.os }}-renderer-modules-${{ hashFiles('src/renderer/package-lock.json') }}"
        timeout-minutes: 2

      - name: Cache root node_modules
        uses: actions/cache@v3
        timeout-minutes: 5
        id: root-cache
        continue-on-error: true
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-root-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-root-modules-
        env:
          ACTIONS_CACHE_DEBUG: true
          ACTIONS_RUNNER_DEBUG: true

      - name: Cache renderer node_modules
        uses: actions/cache@v3
        timeout-minutes: 5
        id: renderer-cache
        continue-on-error: true
        with:
          path: |
            src/renderer/node_modules
            ~/.npm
          key: ${{ runner.os }}-renderer-modules-${{ hashFiles('src/renderer/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-renderer-modules-
        env:
          ACTIONS_CACHE_DEBUG: true
          ACTIONS_RUNNER_DEBUG: true

      - name: Install root dependencies
        run: |
          echo "Installing root dependencies..."
          echo "Cache hit status: ${{ steps.root-cache.outputs.cache-hit }}"
          echo "Cache primary key: ${{ steps.root-cache.outputs.cache-primary-key }}"
          echo "Cache matched key: ${{ steps.root-cache.outputs.cache-matched-key }}"
          
          # Always do a fresh install for now to debug caching
          echo "Performing fresh install..."
          npm ci --prefer-offline --no-audit --no-fund || {
            echo "Root dependencies installation failed!"
            exit 1
          }
          
          # List installed modules for debugging
          echo "Installed modules:"
          ls -la node_modules | head -n 5
        timeout-minutes: 15
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Install renderer dependencies
        run: |
          cd src/renderer
          echo "Installing renderer dependencies..."
          echo "Cache hit status: ${{ steps.renderer-cache.outputs.cache-hit }}"
          echo "Cache primary key: ${{ steps.renderer-cache.outputs.cache-primary-key }}"
          echo "Cache matched key: ${{ steps.renderer-cache.outputs.cache-matched-key }}"
          
          # Always do a fresh install for now to debug caching
          echo "Performing fresh install..."
          npm ci --prefer-offline --no-audit --no-fund || {
            echo "Renderer dependencies installation failed!"
            exit 1
          }
          
          # List installed modules for debugging
          echo "Installed modules:"
          ls -la node_modules | head -n 5
          cd ../..
        timeout-minutes: 15
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Install electron-builder
        run: |
          echo "Installing electron-builder..."
          # Install globally to ensure it's available for npx
          npm install -g electron-builder@26.0.12
          # Also install locally for the project
          npm install electron-builder@26.0.12 --save-dev --prefer-offline --no-audit --no-fund --no-package-lock || {
            echo "Electron-builder installation failed!"
            exit 1
          }
          # Verify installation
          if ! command -v electron-builder &> /dev/null; then
            echo "Electron-builder not found in PATH after installation!"
            exit 1
          fi
          echo "Electron-builder installed successfully at $(which electron-builder)"
        timeout-minutes: 2
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Verify installations
        run: |
          echo "Verifying installations..."
          if [ ! -d "node_modules" ] || [ ! -d "src/renderer/node_modules" ]; then
            echo "Installation verification failed! Required node_modules directories not found."
            exit 1
          fi
          echo "All dependencies installed successfully!"
        timeout-minutes: 1

      - name: Build renderer
        run: |
          cd src/renderer
          export NODE_OPTIONS="--max-old-space-size=4096"
          export CI=false
          export GENERATE_SOURCEMAP=false
          export DISABLE_ESLINT_PLUGIN=true
          export NODE_ENV=production
          export GITHUB_ACTIONS=true
          export TSC_COMPILE_ON_ERROR=true
          
          echo "Starting renderer build..."
          echo "Step 1/4: Cleaning build directory..."
          rm -rf build
          
          echo "Step 2/4: Starting build process..."
          # Start a background process to show progress
          (
            while true; do
              echo "Build in progress... $(date)"
              sleep 30
            done
          ) & PROGRESS_PID=$!
          
          # Run the build
          if ! npm run build; then
            kill $PROGRESS_PID 2>/dev/null || true
            echo "Build failed!"
            exit 1
          fi
          
          # Kill the progress process
          kill $PROGRESS_PID 2>/dev/null || true
          
          echo "Step 3/4: Verifying build output..."
          if [ ! -d "build" ]; then
            echo "Build directory not found!"
            exit 1
          fi
          
          echo "Step 4/4: Build completed successfully"
          cd ../..
        timeout-minutes: 30
        env:
          NODE_ENV: production
          GITHUB_ACTIONS: true

      - name: Build preload script
        run: |
          cd src/renderer
          cd ../..
          npm run build-preload

      - name: Build/Release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
          artifact_name: Aitomics-UI-${{ matrix.os }}-${{ github.ref_name }}
          args: --mac --win --publish always
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # Remove DEBUG flag to reduce noise
          # DEBUG: electron-builder 