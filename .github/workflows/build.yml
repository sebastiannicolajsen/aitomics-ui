name: Build and Release

on:
  push:
    tags:
      - 'v*'

# Add permissions block at the workflow level
permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    outputs:
      release_notes: ${{ steps.release_notes.outputs.notes }}

    env:
      ALLOW_UNRESOLVED_DEPENDENCIES: true
      USE_SYMLINKS: false
      USE_HARD_LINKS: false
      NODE_OPTIONS: --max_old_space_size=4096
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for release notes

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd src/renderer && npm ci && cd ../..

      - name: Generate Release Notes
        id: release_notes
        shell: bash
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using all commits"
            RELEASE_NOTES=$(git log --pretty=format:"- %s (%h)%n" HEAD)
          else
            echo "Generating notes from $PREV_TAG to HEAD"
            RELEASE_NOTES=$(git log --pretty=format:"- %s (%h)%n" $PREV_TAG..HEAD)
          fi
          
          # Debug output (will be hidden in logs)
          echo "Generated release notes:"
          echo "$RELEASE_NOTES"
          
          # Set output without escaping newlines
          {
            echo "notes<<EOF"
            echo "$RELEASE_NOTES"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Package macOS app
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          npm run package-app
          mkdir -p artifacts/macos
          mv dist/*.dmg dist/*.zip artifacts/macos/ 2>/dev/null || true
          cd artifacts/macos
          for file in *; do
            if [ -f "$file" ]; then
              shasum -a 256 "$file" >> macos-checksums.txt
            fi
          done

      - name: Package Windows app
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          npm run package-app
          New-Item -ItemType Directory -Force -Path artifacts/windows
          $exeFiles = Get-ChildItem -Path dist -Filter *.exe -ErrorAction SilentlyContinue
          if ($exeFiles) {
            $exeFiles | ForEach-Object {
              Copy-Item $_.FullName -Destination artifacts/windows/
            }
          }
          Set-Location artifacts/windows
          Get-ChildItem -ErrorAction SilentlyContinue | ForEach-Object {
            $hash = (Get-FileHash $_.FullName -Algorithm SHA256).Hash
            "$hash  $($_.Name)" | Out-File -Append windows-checksums.txt
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: artifacts/

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: "*-artifacts"
          merge-multiple: true

      - name: Generate Update Channel Files
        run: |
          # Get version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Generate latest-mac.yml
          cat > artifacts/macos/latest-mac.yml << EOF
          version: ${VERSION}
          files:
            - url: Aitomics.UI-${VERSION}-arm64-mac.zip
              sha512: $(shasum -a 512 artifacts/macos/Aitomics.UI-${VERSION}-arm64-mac.zip | cut -d' ' -f1)
              size: $(stat -f%z artifacts/macos/Aitomics.UI-${VERSION}-arm64-mac.zip)
            - url: Aitomics.UI-${VERSION}-arm64.dmg
              sha512: $(shasum -a 512 artifacts/macos/Aitomics.UI-${VERSION}-arm64.dmg | cut -d' ' -f1)
              size: $(stat -f%z artifacts/macos/Aitomics.UI-${VERSION}-arm64.dmg)
          path: Aitomics.UI-${VERSION}-arm64.dmg
          sha512: $(shasum -a 512 artifacts/macos/Aitomics.UI-${VERSION}-arm64.dmg | cut -d' ' -f1)
          releaseDate: '$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")'
          EOF
          
          # Generate latest.yml for Windows
          cat > artifacts/windows/latest.yml << EOF
          version: ${VERSION}
          files:
            - url: Aitomics.UI.Setup.${VERSION}.exe
              sha512: $(shasum -a 512 artifacts/windows/Aitomics.UI.Setup.${VERSION}.exe | cut -d' ' -f1)
              size: $(stat -f%z artifacts/windows/Aitomics.UI.Setup.${VERSION}.exe)
            - url: Aitomics.UI.${VERSION}.exe
              sha512: $(shasum -a 512 artifacts/windows/Aitomics.UI.${VERSION}.exe | cut -d' ' -f1)
              size: $(stat -f%z artifacts/windows/Aitomics.UI.${VERSION}.exe)
          path: Aitomics.UI.Setup.${VERSION}.exe
          sha512: $(shasum -a 512 artifacts/windows/Aitomics.UI.Setup.${VERSION}.exe | cut -d' ' -f1)
          releaseDate: '$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")'
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: ${{ needs.build.outputs.release_notes }}
          files: |
            artifacts/macos/*.dmg
            artifacts/windows/*.exe
            artifacts/macos/*.zip
            artifacts/macos/macos-checksums.txt
            artifacts/macos/latest-mac.yml
            artifacts/windows/windows-checksums.txt
            artifacts/windows/latest.yml
          asset_name: |
            Executables/${{ github.ref_name }}/macos-dmg
            Executables/${{ github.ref_name }}/windows-exe
            Assets/${{ github.ref_name }}/macos-zip
            Assets/${{ github.ref_name }}/macos-checksums
            Assets/${{ github.ref_name }}/macos-latest-yml
            Assets/${{ github.ref_name }}/windows-checksums
            Assets/${{ github.ref_name }}/windows-latest-yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 