name: Build and Release

on:
  push:
    tags:
      - 'v*'

# Add permissions block at the workflow level
permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    env:
      ALLOW_UNRESOLVED_DEPENDENCIES: true
      USE_SYMLINKS: false
      USE_HARD_LINKS: false
      NODE_OPTIONS: --max_old_space_size=4096
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for release notes

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd src/renderer && npm ci && cd ../..

      - name: Generate Release Notes
        id: release_notes
        shell: bash
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using all commits"
            RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" HEAD)
          else
            echo "Generating notes from $PREV_TAG to HEAD"
            RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" $PREV_TAG..HEAD)
          fi
          
          # Debug output (will be hidden in logs)
          echo "Generated release notes:"
          echo "$RELEASE_NOTES"
          
          # Escape for GitHub Actions
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
          
          # Set output
          {
            echo "notes<<EOF"
            echo "$RELEASE_NOTES"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Package macOS app
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          npm run package-app
          mkdir -p artifacts/macos
          mv dist/*.dmg dist/*.zip artifacts/macos/ 2>/dev/null || true
          cd artifacts/macos
          # Use shasum on macOS
          for file in *; do
            if [ -f "$file" ]; then
              shasum -a 256 "$file" >> checksums.txt
            fi
          done

      - name: Package Windows app
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          npm run package-app
          # Create artifacts directory
          New-Item -ItemType Directory -Force -Path artifacts/windows
          # Copy exe files if they exist, ignore errors if they don't
          $exeFiles = Get-ChildItem -Path dist -Filter *.exe -ErrorAction SilentlyContinue
          if ($exeFiles) {
            $exeFiles | ForEach-Object {
              Copy-Item $_.FullName -Destination artifacts/windows/
            }
          }
          # Create checksums
          Set-Location artifacts/windows
          Get-ChildItem -ErrorAction SilentlyContinue | ForEach-Object {
            $hash = (Get-FileHash $_.FullName -Algorithm SHA256).Hash
            "$hash  $($_.Name)" | Out-File -Append checksums.txt
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: artifacts/

      - name: Build and Publish
        shell: bash
        run: |
          echo "Starting build and publish..."
          # Debug: Show if we have release notes
          if [ -n "$RELEASE_NOTES" ]; then
            echo "Release notes are set (length: ${#RELEASE_NOTES})"
          else
            echo "Warning: No release notes available"
          fi
          npm run publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_NOTES: ${{ steps.release_notes.outputs.notes }} 